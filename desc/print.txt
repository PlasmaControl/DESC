__init__.py:    logging- e.g. "INFO"- will print logs of "INFO" level or higher- "WARNING",
__init__.py:        print("Failed to set console output: invalid output: '%s'" % console_log_output)
__init__.py:        print("Failed to set console log level: invalid level: '%s'" % console_log_level)
__init__.py:    logging- e.g. "INFO"- will print logs of "INFO" level or higher- "WARNING",
__init__.py:        print("Failed to set up log file: %s" % str(exception))
__init__.py:        print("Failed to set log file log level: invalid level: '%s'" % logfile_level)
__main__.py:    and prints and plots the resulting equilibrium.
__main__.py:        print(desc.BANNER)
_version.py:                print("unable to run %s" % dispcmd)
_version.py:                print(e)
_version.py:            print("unable to find command, tried %s" % (commands,))
_version.py:            print("unable to run %s (error)" % dispcmd)
_version.py:            print("stdout was %s" % stdout)
_version.py:        print(
_version.py:            print("keywords are unexpanded, not using")
_version.py:            print("discarding '%s', no digits" % ",".join(refs - tags))
_version.py:        print("likely tags: %s" % ",".join(sorted(tags)))
_version.py:                print("picking %s" % r)
_version.py:        print("no suitable tags, using unknown + full revision id")
_version.py:            print("Directory %s not under git control" % root)
_version.py:                print(fmt % (full_tag, tag_prefix))
equilibrium.py:        objective.print_value(objective.x(eq))
equilibrium.py:        objective.print_value(objective.x(eq))
equilibrium.py:        objective.print_value(objective.x(eq))
equilibrium.py:        objective.print_value(objective.x(eq))
equilibrium.py:        objective.print_value(objective.x(eq))
equilibrium.py:            objective.print_value(objective.x(eq_new))
equilibrium.py:    def _print_iteration(self, ii, equil):
equilibrium.py:                self._print_iteration(ii, equil)
equilibrium.py:                self._print_iteration(ii, equil)
io/input_reader.py:            text to print at the top of the file
objectives/_equilibrium.py:        self._print_value_fmt = "Total force: {:10.3e} " + units
objectives/_equilibrium.py:        self._print_value_fmt = "Radial force: {:10.3e} " + units
objectives/_equilibrium.py:        self._print_value_fmt = "Helical force: {:10.3e}, " + units
objectives/_equilibrium.py:        self._print_value_fmt = "Total MHD energy: {:10.3e} (J)"
objectives/_equilibrium.py:        self._print_value_fmt = "Total current density: {:10.3e} " + units
objectives/_generic.py:        self._print_value_fmt = (
objectives/_generic.py:        self._print_value_fmt = "Toroidal current: {:10.3e} (A)"
objectives/_geometry.py:        self._print_value_fmt = "Plasma volume: {:10.3e} (m^3)"
objectives/_geometry.py:        self._print_value_fmt = "Aspect ratio: {:10.3e} (dimensionless)"
objectives/_qs.py:        self._print_value_fmt = (
objectives/_qs.py:        if hasattr(self, "_print_value_fmt"):
objectives/_qs.py:            self._print_value_fmt = (
objectives/_qs.py:        self._print_value_fmt = (
objectives/_qs.py:        if hasattr(self, "_print_value_fmt"):
objectives/_qs.py:            self._print_value_fmt = (
objectives/_qs.py:        self._print_value_fmt = "Quasi-symmetry error: {:10.3e} " + units
objectives/_stability.py:        self._print_value_fmt = "Mercier Stability: {:10.3e}"
objectives/_stability.py:        self._print_value_fmt = "Magnetic Well: {:10.3e}"
objectives/_stability.py:            print("Precomputing transforms")
objectives/linear_objectives.py:        self._print_value_fmt = "R boundary error: {:10.3e} (m)"
objectives/linear_objectives.py:        self._print_value_fmt = "Z boundary error: {:10.3e} (m)"
objectives/linear_objectives.py:        self._print_value_fmt = "lambda gauge error: {:10.3e} (m)"
objectives/linear_objectives.py:        self._print_value_fmt = None
objectives/linear_objectives.py:        self._print_value_fmt = "Fixed-pressure profile error: {:10.3e} (Pa)"
objectives/linear_objectives.py:        self._print_value_fmt = "Fixed-iota profile error: {:10.3e}"
objectives/linear_objectives.py:        self._print_value_fmt = "Fixed-current profile error: {:10.3e}"
objectives/linear_objectives.py:        self._print_value_fmt = "Fixed-Psi error: {:10.3e} (Wb)"
objectives/objective_funs.py:    def print_value(self, x):
objectives/objective_funs.py:            obj.print_value(**kwargs)
objectives/objective_funs.py:    def print_value(self, *args, **kwargs):
objectives/objective_funs.py:        logging.WARNING(self._print_value_fmt.format(jnp.linalg.norm(x)))
optimize/fmin_scalar.py:    print_header_nonlinear,
optimize/fmin_scalar.py:    print_iteration_nonlinear,
optimize/fmin_scalar.py:    print_header_nonlinear()
optimize/fmin_scalar.py:            print_iteration_nonlinear(
optimize/least_squares.py:    print_header_nonlinear,
optimize/least_squares.py:    print_iteration_nonlinear,
optimize/least_squares.py:    print_header_nonlinear()
optimize/least_squares.py:        print_iteration_nonlinear(
optimize/optimizer.py:    print_header_nonlinear,
optimize/optimizer.py:    print_iteration_nonlinear,
optimize/optimizer.py:                        print_iteration_nonlinear(
optimize/optimizer.py:                    print_iteration_nonlinear(
optimize/optimizer.py:            print_header_nonlinear()
optimize/optimizer.py:        timer.pretty_print(
optimize/stochastic.py:    print_header_nonlinear,
optimize/stochastic.py:    print_iteration_nonlinear,
optimize/stochastic.py:    print_header_nonlinear()
optimize/stochastic.py:        print_iteration_nonlinear(iteration, nfev, f, df, step_norm, g_norm)
optimize/utils.py:def print_header_nonlinear():
optimize/utils.py:def print_iteration_nonlinear(
utils.py:    The elapsed time can be printed with ``timer.disp(name)``
utils.py:    def pretty_print(name, time):
utils.py:        """Pretty print time interval.
utils.py:        this is just a helper for pretty printing arbitrary time data
utils.py:            text to print before time
utils.py:            time (in seconds) to print
utils.py:        """Pretty print elapsed time.
utils.py:        self.pretty_print(name, time)
